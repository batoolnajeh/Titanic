import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns 
%matplotlib inline

from google.colab import files
uploaded = files.upload()

import io
train = pd.read_csv(io.BytesIO(uploaded['titanic_train.csv']))

train.head(15)

train.info()

train.isnull().sum()

sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='Blues')

sns.set_style('whitegrid')
sns.countplot(x='Survived',data=train,palette='RdBu_r')

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue="Sex",data=train,palette='RdBu_r')

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue="Pclass",data=train,palette='gist_stern')

train['Age'].hist(bins=30,color='darkred',alpha=0.7)

sns.displot(train['Age'],kind='kde')

sns.countplot(x='SibSp',data=train)

sns.countplot(x='Parch',data=train)

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='SibSp',data=train,palette='gist_stern')

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='Parch',data=train,palette='gist_stern')

plt.figure(figsize=(12, 7))
sns.boxplot(x='Pclass',y='Age',data=train,palette='winter')
sns.swarmplot(x='Pclass',y='Age',data=train)

train['Title']=train['Name'].str.extract('([A-Za-z]+)\.',expand=False)

train['Title'].value_counts()

title_mapping={"Mr":0,"Miss":1,"Mrs":2,"Master":3,"Dr":3,"Rev":3,"Mlle":3,"Major":3,"Col":3,"Sir":3,"Capt":3,"Ms":3,"Jonkheer":3,"Countess":3,"Mme":3,"Lady":3
               ,"Don":3}
train['Title']=train['Title'].map(title_mapping)

train.head()

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='Title',data=train,palette='gist_stern')

arr=[train[train['Pclass']==1]['Age'].mean(),
train[train['Pclass']==2]['Age'].mean(),
train[train['Pclass']==3]['Age'].mean()]
arr

def impute_age(cols):
  Age=cols[0]
  Pclass=cols[1]

  if (pd.isnull(Age)):
    if (Pclass==1):
      return round(arr[0])
    elif (Pclass ==2):
      return round(arr[1])
    elif (Pclass ==3):
      return round(arr[2])
  else:
    return Age

train['Age']= train[['Age','Pclass']].apply(impute_age,axis=1)

train.isnull().sum()

sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')

train.drop('Cabin',axis=1,inplace=True)

sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')

train.dropna(inplace=True)

train['FamilySize']=train['SibSp']+train['Parch']+1

train.head()

train.drop(['PassengerId','Name','Ticket','SibSp','Parch'],axis=1,inplace=True)

pd.get_dummies(train['Sex'])

sex=pd.get_dummies(train['Sex'],drop_first=True)
embarked=pd.get_dummies(train['Embarked'],drop_first=True)

train.drop(['Sex','Embarked'],axis=1,inplace=True)

train=pd.concat([train,sex,embarked],axis=1)

train.head()

from sklearn.model_selection import train_test_split

x=train.drop('Survived',axis=1)
y=train['Survived']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=101)

from sklearn.preprocessing import MinMaxScaler
scaler =MinMaxScaler()
x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)

x_train

from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

logmodel=LogisticRegression()
logmodel.fit(x_train,y_train)

pred=logmodel.predict(x_test)
pred

confusion_matrix(y_test,pred)

print(classification_report(y_test,pred))

kmodel=KNeighborsClassifier(n_neighbors=3)
kmodel.fit(x_train,y_train)

Kpred=kmodel.predict(x_test)
Kpred

confusion_matrix(y_test,Kpred)

print(classification_report(y_test,Kpred))

tree= DecisionTreeClassifier()
tree.fit(x_train,y_train)
Dpred=tree.predict(x_test)
Dpred

confusion_matrix(y_test,Dpred)

print(classification_report(y_test, Dpred))
